
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\024" +
    "\004\000\002\024\002\000\002\003\023\000\002\004\011" +
    "\000\002\022\004\000\002\022\002\000\002\023\004\000" +
    "\002\023\002\000\002\007\005\000\002\016\004\000\002" +
    "\016\002\000\002\010\017\000\002\006\005\000\002\015" +
    "\004\000\002\015\002\000\002\017\005\000\002\017\002" +
    "\000\002\020\006\000\002\020\002\000\002\011\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\005\005\000\002\005\011\000\002\005\007\000\002\005" +
    "\007\000\002\005\006\000\002\005\011\000\002\021\004" +
    "\000\002\021\002\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\006\000\002\012\005\000\002\012\010\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\007\000\002\012\006\000" +
    "\002\012\004\000\002\012\005\000\002\013\004\000\002" +
    "\013\002\000\002\014\005\000\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\005\005\001\002\000\006\002\ufffe\005" +
    "\144\001\002\000\004\046\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\010\011\001" +
    "\002\000\004\004\012\001\002\000\004\012\013\001\002" +
    "\000\004\014\014\001\002\000\004\013\015\001\002\000" +
    "\004\006\016\001\002\000\004\015\017\001\002\000\004" +
    "\016\020\001\002\000\004\017\021\001\002\000\004\046" +
    "\022\001\002\000\004\007\023\001\002\000\004\010\024" +
    "\001\002\000\014\010\030\027\031\030\027\031\032\046" +
    "\025\001\002\000\006\016\132\033\131\001\002\000\004" +
    "\011\127\001\002\000\004\006\123\001\002\000\016\010" +
    "\030\011\uffe1\027\031\030\027\031\032\046\025\001\002" +
    "\000\004\006\111\001\002\000\004\006\033\001\002\000" +
    "\022\006\044\025\035\042\036\043\040\044\042\045\034" +
    "\046\041\047\043\001\002\000\006\024\103\046\102\001" +
    "\002\000\030\007\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\060\uffd8\001" +
    "\002\000\030\007\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\060\uffd7\001" +
    "\002\000\022\007\100\016\052\034\053\035\054\036\050" +
    "\037\046\040\051\060\055\001\002\000\030\007\uffd6\016" +
    "\uffd6\017\uffd6\021\uffd6\022\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\060\uffd6\001\002\000\030\007\uffd5\016" +
    "\uffd5\017\uffd5\021\uffd5\022\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\060\uffd5\001\002\000\030\007\uffd4\016" +
    "\uffd4\017\uffd4\021\uffd4\022\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\060\uffd4\001\002\000\022\006\044\025" +
    "\035\042\036\043\040\044\042\045\034\046\041\047\043" +
    "\001\002\000\022\006\044\025\035\042\036\043\040\044" +
    "\042\045\034\046\041\047\043\001\002\000\022\007\047" +
    "\016\052\034\053\035\054\036\050\037\046\040\051\060" +
    "\055\001\002\000\022\006\044\025\035\042\036\043\040" +
    "\044\042\045\034\046\041\047\043\001\002\000\030\007" +
    "\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\060\uffd0\001\002\000\022\006" +
    "\044\025\035\042\036\043\040\044\042\045\034\046\041" +
    "\047\043\001\002\000\022\006\044\025\035\042\036\043" +
    "\040\044\042\045\034\046\041\047\043\001\002\000\022" +
    "\006\044\025\035\042\036\043\040\044\042\045\034\046" +
    "\041\047\043\001\002\000\022\006\044\025\035\042\036" +
    "\043\040\044\042\045\034\046\041\047\043\001\002\000" +
    "\022\006\044\025\035\042\036\043\040\044\042\045\034" +
    "\046\041\047\043\001\002\000\006\041\057\046\056\001" +
    "\002\000\004\006\060\001\002\000\030\007\uffda\016\uffda" +
    "\017\uffda\021\uffda\022\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\060\uffda\001\002\000\024\006\044\007\uffce" +
    "\025\035\042\036\043\040\044\042\045\034\046\041\047" +
    "\043\001\002\000\024\007\uffcc\016\052\022\065\034\053" +
    "\035\054\036\050\037\046\040\051\060\055\001\002\000" +
    "\004\007\063\001\002\000\030\007\uffd9\016\uffd9\017\uffd9" +
    "\021\uffd9\022\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\060\uffd9\001\002\000\004\007\uffcf\001\002\000\022" +
    "\006\044\025\035\042\036\043\040\044\042\045\034\046" +
    "\041\047\043\001\002\000\024\007\uffcc\016\052\022\065" +
    "\034\053\035\054\036\050\037\046\040\051\060\055\001" +
    "\002\000\004\007\uffcd\001\002\000\030\007\uffdf\016\052" +
    "\017\uffdf\021\uffdf\022\uffdf\034\uffdf\035\uffdf\036\050\037" +
    "\uffdf\040\uffdf\060\055\001\002\000\030\007\uffe0\016\052" +
    "\017\uffe0\021\uffe0\022\uffe0\034\uffe0\035\uffe0\036\050\037" +
    "\uffe0\040\uffe0\060\055\001\002\000\022\016\052\017\073" +
    "\034\053\035\054\036\050\037\046\040\051\060\055\001" +
    "\002\000\030\007\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\060\uffdb\001" +
    "\002\000\030\007\uffdd\016\052\017\uffdd\021\uffdd\022\uffdd" +
    "\034\053\035\054\036\050\037\046\040\uffdd\060\055\001" +
    "\002\000\030\007\uffde\016\052\017\uffde\021\uffde\022\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\060\055\001" +
    "\002\000\030\007\uffdc\016\052\017\uffdc\021\uffdc\022\uffdc" +
    "\034\053\035\054\036\050\037\uffdc\040\uffdc\060\055\001" +
    "\002\000\030\007\uffd1\016\052\017\uffd1\021\uffd1\022\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\060\055\001" +
    "\002\000\004\021\101\001\002\000\022\010\uffe5\011\uffe5" +
    "\023\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\046\uffe5\001" +
    "\002\000\004\006\107\001\002\000\004\016\104\001\002" +
    "\000\022\006\044\025\035\042\036\043\040\044\042\045" +
    "\034\046\041\047\043\001\002\000\022\016\052\017\106" +
    "\034\053\035\054\036\050\037\046\040\051\060\055\001" +
    "\002\000\030\007\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\060\uffd3\001" +
    "\002\000\004\007\110\001\002\000\030\007\uffd2\016\uffd2" +
    "\017\uffd2\021\uffd2\022\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\060\uffd2\001\002\000\022\006\044\025\035" +
    "\042\036\043\040\044\042\045\034\046\041\047\043\001" +
    "\002\000\022\007\113\016\052\034\053\035\054\036\050" +
    "\037\046\040\051\060\055\001\002\000\014\010\030\027" +
    "\031\030\027\031\032\046\025\001\002\000\004\032\115" +
    "\001\002\000\014\010\030\027\031\030\027\031\032\046" +
    "\025\001\002\000\022\010\uffe7\011\uffe7\023\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\046\uffe7\001\002\000\004\011" +
    "\122\001\002\000\020\010\030\011\uffe1\023\uffe1\027\031" +
    "\030\027\031\032\046\025\001\002\000\006\011\uffe2\023" +
    "\uffe2\001\002\000\022\010\uffe8\011\uffe8\023\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\046\uffe8\001\002\000\022\006" +
    "\044\025\035\042\036\043\040\044\042\045\034\046\041" +
    "\047\043\001\002\000\022\007\125\016\052\034\053\035" +
    "\054\036\050\037\046\040\051\060\055\001\002\000\014" +
    "\010\030\027\031\030\027\031\032\046\025\001\002\000" +
    "\022\010\uffe6\011\uffe6\023\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\046\uffe6\001\002\000\004\011\130\001\002\000" +
    "\006\002\ufffd\005\ufffd\001\002\000\022\006\044\025\035" +
    "\042\036\043\040\044\042\045\034\046\041\047\043\001" +
    "\002\000\022\006\044\025\035\042\036\043\040\044\042" +
    "\045\034\046\041\047\043\001\002\000\022\016\052\017" +
    "\134\034\053\035\054\036\050\037\046\040\051\060\055" +
    "\001\002\000\004\033\135\001\002\000\022\006\044\025" +
    "\035\042\036\043\040\044\042\045\034\046\041\047\043" +
    "\001\002\000\022\016\052\021\137\034\053\035\054\036" +
    "\050\037\046\040\051\060\055\001\002\000\022\010\uffe3" +
    "\011\uffe3\023\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\046" +
    "\uffe3\001\002\000\022\016\052\021\141\034\053\035\054" +
    "\036\050\037\046\040\051\060\055\001\002\000\022\010" +
    "\uffe4\011\uffe4\023\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\046\uffe4\001\002\000\004\002\000\001\002\000\006\002" +
    "\ufffe\005\144\001\002\000\004\046\145\001\002\000\006" +
    "\010\ufffa\020\146\001\002\000\004\046\221\001\002\000" +
    "\004\010\150\001\002\000\014\004\ufff5\011\ufff5\024\156" +
    "\026\155\046\152\001\002\000\006\004\166\011\ufff8\001" +
    "\002\000\004\046\uffe9\001\002\000\004\046\162\001\002" +
    "\000\014\004\ufff5\011\ufff5\024\156\026\155\046\152\001" +
    "\002\000\004\046\uffeb\001\002\000\006\016\157\046\uffea" +
    "\001\002\000\004\017\160\001\002\000\004\046\uffec\001" +
    "\002\000\006\004\ufff6\011\ufff6\001\002\000\004\021\163" +
    "\001\002\000\014\004\ufff7\011\ufff7\024\ufff7\026\ufff7\046" +
    "\ufff7\001\002\000\004\011\220\001\002\000\006\004\166" +
    "\011\ufff8\001\002\000\010\024\156\026\155\046\152\001" +
    "\002\000\004\046\170\001\002\000\004\006\171\001\002" +
    "\000\012\007\uffef\024\156\026\155\046\152\001\002\000" +
    "\004\046\211\001\002\000\004\007\174\001\002\000\004" +
    "\010\175\001\002\000\022\010\ufff1\023\ufff1\024\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\046\ufff1\001\002\000\022" +
    "\010\030\023\uffe1\024\156\026\155\027\031\030\027\031" +
    "\032\046\202\001\002\000\004\046\207\001\002\000\004" +
    "\023\203\001\002\000\022\010\ufff2\023\ufff2\024\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\046\ufff2\001\002\000\010" +
    "\016\132\033\131\046\uffe9\001\002\000\022\006\044\025" +
    "\035\042\036\043\040\044\042\045\034\046\041\047\043" +
    "\001\002\000\022\016\052\021\205\034\053\035\054\036" +
    "\050\037\046\040\051\060\055\001\002\000\004\011\206" +
    "\001\002\000\006\004\ufff4\011\ufff4\001\002\000\004\021" +
    "\210\001\002\000\022\010\ufff3\023\ufff3\024\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\046\ufff3\001\002\000\006\007" +
    "\uffed\022\212\001\002\000\010\024\156\026\155\046\152" +
    "\001\002\000\004\007\ufff0\001\002\000\004\046\215\001" +
    "\002\000\006\007\uffed\022\212\001\002\000\004\007\uffee" +
    "\001\002\000\004\011\ufff9\001\002\000\006\002\ufffc\005" +
    "\ufffc\001\002\000\004\010\ufffb\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\006\002\005\003\003\001\001\000\006\004" +
    "\142\024\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\117\021\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\076\001\001\000\004\012\044" +
    "\001\001\000\002\001\001\000\004\012\075\001\001\000" +
    "\002\001\001\000\004\012\074\001\001\000\004\012\073" +
    "\001\001\000\004\012\071\001\001\000\004\012\070\001" +
    "\001\000\004\012\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\060\013\061\001" +
    "\001\000\004\014\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\065\001\001\000" +
    "\004\014\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\111\001\001\000\002\001\001\000\004" +
    "\005\113\001\001\000\002\001\001\000\004\005\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\117" +
    "\021\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\123\001\001\000\002\001\001\000\004\005\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\137\001\001\000\004\012\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\142\024" +
    "\221\001\001\000\002\001\001\000\004\022\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\153\011" +
    "\152\016\150\001\001\000\006\010\164\023\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\153\011" +
    "\152\016\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\164\023\216\001\001\000\004\011\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\171\017\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\175\001\001\000\012\005\117\006\200" +
    "\011\176\021\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\212" +
    "\001\001\000\004\011\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s;
	int line = 0; 
	String lineStr;
	boolean inComment = false;
	int commentStartLineNum = 0;
    try {
	s = lexer.next_token();
	while(s.sym == sym.START_COMMENT || s.sym == sym.END_COMMENT){
		if(s.sym == sym.START_COMMENT && !inComment){
			inComment = true;
			commentStartLineNum = lexer.getLine();
		}else if(s.sym == sym.END_COMMENT){
			inComment = false;
		}
		s = lexer.next_token();
	}
	
	this.prevLine = this.curLine;
	this.curLine = lexer.getLine();
	
	
	/*System.out.print(s.sym);
	System.out.print("[");
	System.out.print(this.curLine);
 	System.out.print(":");
 	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(sym.terminalNames[s.sym]);
	if (s.value != null) {
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	 }
	 System.out.print("\n");*/
	 
	 // System.out.println("prev = " + this.prevLine + " cur = " + this.curLine);
	 
	 if(inComment && s.sym == sym.EOF) {
	 	 lineStr = String.valueOf(commentStartLineNum );
   	     report_error( lineStr, null); 
	 } 
	 
	return s;
     } catch (java.lang.Error e) {
   	     report_error("0", null); 
         return null;
     }

    }


	public Lexer lexer;
	public int curLine = 0;
	public int prevLine = 0;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;

	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
		String error = "Syntax error at line ";
		if(message.equals("0") || message.equals("Syntax error")) {
		
			error +=  String.valueOf(lexer.getLine());
		}
		else {
			error += message;
		}
		error += " of input.";

		System.err.println(error);
		System.exit(1);
	}
	public void debug(String str){
		//System.out.println(str );
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= mainClass Classes 
            {
              Program RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass main = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int classesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int classesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ClassDecl> classes = (LinkedList<ClassDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 debug("prog "); RESULT = new Program(main, classes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Classes ::= ClassDeclaration Classes 
            {
              LinkedList<ClassDecl> RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDecl className = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ClassDecl> list = (LinkedList<ClassDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("Classes "); list.addFirst(className); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Classes",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Classes ::= 
            {
              LinkedList<ClassDecl> RESULT =null;
		 RESULT = new LinkedList<ClassDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Classes",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainClass ::= CLASS ID L_CURLY_BRACKET PUBLIC STATIC VOID MAIN LPAREN STRING L_BRACKET R_BRACKET ID RPAREN L_CURLY_BRACKET statement R_CURLY_BRACKET R_CURLY_BRACKET 
            {
              MainClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int argsNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argsNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String argsName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int mainStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mainStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement mainStatement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		debug("mainClass "); RESULT = new MainClass(name, argsName, mainStatement); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDeclaration ::= CLASS ID Extends L_CURLY_BRACKET fields Methods R_CURLY_BRACKET 
            {
              ClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String superClass = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<VarDecl> variables = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<MethodDecl> methods = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 debug("ClassDeclaration  ") ;  RESULT = new ClassDecl(name, superClass==null ? null : superClass, variables, methods); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Extends ::= EXTENDS ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("Extends "); RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Extends",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Extends ::= 
            {
              String RESULT =null;
		 RESULT = null ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Extends",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Methods ::= MethodDeclaration Methods 
            {
              LinkedList<MethodDecl> RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDecl method = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<MethodDecl> list = (LinkedList<MethodDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("Methods "); list.addFirst(method); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Methods",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Methods ::= 
            {
              LinkedList<MethodDecl> RESULT =null;
		 RESULT = new LinkedList<MethodDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Methods",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fieldDeclaration ::= Type ID SEMICOLON 
            {
              VarDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstType type = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String Id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 debug("fieldDeclaration"); RESULT = new VarDecl(type, Id, lexer.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldDeclaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fields ::= fieldDeclaration fields 
            {
              LinkedList<VarDecl> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<VarDecl> list = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("fields"); list.addFirst(var); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fields ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		 RESULT = new LinkedList<VarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclaration ::= PUBLIC Type ID LPAREN FormalArgs RPAREN L_CURLY_BRACKET Vars BlockStatement RETURN Expression SEMICOLON R_CURLY_BRACKET 
            {
              MethodDecl RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		AstType returnType = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		LinkedList<FormalArg> formals = (LinkedList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<VarDecl> variables = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int blockStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int blockStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Statement> blockStatement = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ret = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		debug("MethodDeclaration "); RESULT = new MethodDecl(returnType, name, formals, variables, blockStatement, ret, lexer.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDeclaration ::= Type ID SEMICOLON 
            {
              VarDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstType type = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String Id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 debug("VarDeclaration "); RESULT = new VarDecl(type, Id, lexer.getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Vars ::= Vars VarDeclaration 
            {
              LinkedList<VarDecl> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDecl> list = (LinkedList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("Vars "); list.addLast(var); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Vars ::= 
            {
              LinkedList<VarDecl> RESULT =null;
		 RESULT = new LinkedList<VarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FormalArgs ::= Type ID FormalList 
            {
              LinkedList<FormalArg> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstType type = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String Id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<FormalArg> list = (LinkedList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("FormalArgs  "); list.addFirst(new FormalArg(type,Id, lexer.getLine())); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalArgs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FormalArgs ::= 
            {
              LinkedList<FormalArg> RESULT =null;
		 RESULT = new LinkedList<FormalArg>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalArgs",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FormalList ::= COMMA Type ID FormalList 
            {
              LinkedList<FormalArg> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstType type = (AstType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String Id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<FormalArg> list = (LinkedList<FormalArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("FormalList  "); list.addFirst(new FormalArg(type,Id, lexer.getLine())); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FormalList ::= 
            {
              LinkedList<FormalArg> RESULT =null;
		 RESULT = new LinkedList<FormalArg>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalList",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= INT L_BRACKET R_BRACKET 
            {
              AstType RESULT =null;
		debug("Type  ARR  "); RESULT = new IntArrayAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= BOOLEAN 
            {
              AstType RESULT =null;
		debug("Type  BOOLEAN  "); RESULT = new BoolAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= INT 
            {
              AstType RESULT =null;
		debug("Type  INT  "); RESULT = new IntAstType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= ID 
            {
              AstType RESULT =null;
		int Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String Id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("Type  ID  "); RESULT = new RefType(Id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= L_CURLY_BRACKET BlockStatement R_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int blockListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blockListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> blockList = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 debug("block  "); RESULT = new BlockStatement(blockList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IF LPAREN Expression RPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 debug("if  ");  RESULT = new IfStatement(cond, s1, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= WHILE LPAREN Expression RPAREN statement 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("WHILE  "); RESULT = new WhileStatement(cond, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr arg = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 debug("PRINTLN  "); RESULT = new SysoutStatement(arg); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= ID EQUALS Expression SEMICOLON 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String lv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr rv = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		debug("ASSIGN  ");  RESULT = new AssignStatement(lv, rv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= ID L_BRACKET Expression R_BRACKET EQUALS Expression SEMICOLON 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String lv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr index = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr rv = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 debug("ASSIGN_ARRAY  ");   RESULT = new AssignArrayStatement(lv, index, rv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BlockStatement ::= statement BlockStatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Statement> list = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("BlockStatement   "); list.addFirst(s); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BlockStatement ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStatement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression PLUS Expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("PLUS   "); RESULT = new AddExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression MINUS Expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("MINUS  ");  RESULT = new SubtractExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression MULT Expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("MULT ");  RESULT = new MultExpr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression AND Expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 debug("AND   "); RESULT = new AndExpr(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression LT Expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("LT  ");  RESULT = new LtExpr(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression L_BRACKET Expression R_BRACKET 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr index = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		debug("ARRAY_ACCESS  ");  RESULT = new ArrayAccessExpr(e,index); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression DOT LENGTH 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		debug("ARRAY_LENGTH  ");  RESULT = new ArrayLengthExpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression DOT ID LPAREN ArgsExpr RPAREN 
            {
              Expr RESULT =null;
		int ownerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ownerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr owner = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int methodIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int methodIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String methodId = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> list = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		debug("METHOD_CALL  ");  RESULT = new MethodCallExpr(owner, methodId,list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= NUMBER 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int n = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("IntegerLiteral  ");  RESULT = new IntegerLiteralExpr(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= TRUE 
            {
              Expr RESULT =null;
		debug("True  ");  RESULT = new TrueExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= FALSE 
            {
              Expr RESULT =null;
		debug("False  ");  RESULT = new FalseExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= ID 
            {
              Expr RESULT =null;
		int Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String Id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("Expression   ID ");  RESULT = new IdentifierExpr(Id);; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= THIS 
            {
              Expr RESULT =null;
		 debug("THIS  "); RESULT = new ThisExpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= NEW INT L_BRACKET Expression R_BRACKET 
            {
              Expr RESULT =null;
		int ExprLengthleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ExprLengthright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr ExprLength = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		debug("NEW_INT_ARRAY	");  RESULT = new NewIntArrayExpr(ExprLength); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= NEW ID LPAREN RPAREN 
            {
              Expr RESULT =null;
		int Idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String Id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 debug(" NEW_OBJECT "); RESULT = new NewObjectExpr(Id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= NOT Expression 
            {
              Expr RESULT =null;
		int notExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int notExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr notExpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("Not  ");  RESULT = new NotExpr(notExpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= LPAREN Expression RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 debug("PARANTHESES "); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ArgsExpr ::= Expression ExpressionsList 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> list = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		debug("ArgsExpr   ");  list.addFirst(e); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ArgsExpr ::= 
            {
              LinkedList<Expr> RESULT =null;
		debug("MINUS  ");  RESULT = new LinkedList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpressionsList ::= COMMA Expression ExpressionsList 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> list = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 debug("ExpressionsList   "); list.addFirst(e); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpressionsList ::= 
            {
              LinkedList<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
